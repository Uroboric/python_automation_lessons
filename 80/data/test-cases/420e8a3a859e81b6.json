{"uid":"420e8a3a859e81b6","name":"Asserting Vehicles prices","fullName":"tests.test_vehicles.TestVehicles#test_vehicle_price","historyId":"edb6e8ce052156e6fb2485f34b70ee73","time":{"start":1699970280223,"stop":1699970280223,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55c891834fb3 <unknown>\n#1 0x55c8915084a7 <unknown>\n#2 0x55c89153bc93 <unknown>\n#3 0x55c89153810c <unknown>\n#4 0x55c89157aac6 <unknown>\n#5 0x55c891571713 <unknown>\n#6 0x55c89154418b <unknown>\n#7 0x55c891544f7e <unknown>\n#8 0x55c8917fa8d8 <unknown>\n#9 0x55c8917fe800 <unknown>\n#10 0x55c891808cfc <unknown>\n#11 0x55c8917ff418 <unknown>\n#12 0x55c8917cc42f <unknown>\n#13 0x55c8918234e8 <unknown>\n#14 0x55c8918236b4 <unknown>\n#15 0x55c891834143 <unknown>\n#16 0x7fd732e94ac3 <unknown>","statusTrace":"get_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7fd083e9c310>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options):\n        options = get_chrome_options\n>       driver = webdriver.Chrome(options=options)\n\ntests/conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:80: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:104: in __init__\n    super().__init__(\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:286: in __init__\n    self.start_session(capabilities, browser_profile)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:378: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd088321350>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...\\\\n#14 0x55c8918236b4 \\\\u003Cunknown>\\\\n#15 0x55c891834143 \\\\u003Cunknown>\\\\n#16 0x7fd732e94ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       #0 0x55c891834fb3 <unknown>\nE       #1 0x55c8915084a7 <unknown>\nE       #2 0x55c89153bc93 <unknown>\nE       #3 0x55c89153810c <unknown>\nE       #4 0x55c89157aac6 <unknown>\nE       #5 0x55c891571713 <unknown>\nE       #6 0x55c89154418b <unknown>\nE       #7 0x55c891544f7e <unknown>\nE       #8 0x55c8917fa8d8 <unknown>\nE       #9 0x55c8917fe800 <unknown>\nE       #10 0x55c891808cfc <unknown>\nE       #11 0x55c8917ff418 <unknown>\nE       #12 0x55c8917cc42f <unknown>\nE       #13 0x55c8918234e8 <unknown>\nE       #14 0x55c8918236b4 <unknown>\nE       #15 0x55c891834143 <unknown>\nE       #16 0x7fd732e94ac3 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_webdriver","time":{"start":1699970280224,"stop":1699970289487,"duration":9263},"status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /opt/google/chrome/chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55c891834fb3 <unknown>\n#1 0x55c8915084a7 <unknown>\n#2 0x55c89153bc93 <unknown>\n#3 0x55c89153810c <unknown>\n#4 0x55c89157aac6 <unknown>\n#5 0x55c891571713 <unknown>\n#6 0x55c89154418b <unknown>\n#7 0x55c891544f7e <unknown>\n#8 0x55c8917fa8d8 <unknown>\n#9 0x55c8917fe800 <unknown>\n#10 0x55c891808cfc <unknown>\n#11 0x55c8917ff418 <unknown>\n#12 0x55c8917cc42f <unknown>\n#13 0x55c8918234e8 <unknown>\n#14 0x55c8918236b4 <unknown>\n#15 0x55c891834143 <unknown>\n#16 0x7fd732e94ac3 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 80, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 908, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/python_automation_lessons/python_automation_lessons/tests/conftest.py\", line 25, in get_webdriver\n    driver = webdriver.Chrome(options=options)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py\", line 80, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py\", line 104, in __init__\n    super().__init__(\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 286, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 378, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.6/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"get_chrome_options","time":{"start":1699970280224,"stop":1699970280224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"suite","value":"Testing Vehicles parametrize"},{"name":"tag","value":"parallel"},{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"tests"},{"name":"subSuite","value":"TestVehicles"},{"name":"host","value":"fv-az881-188"},{"name":"thread","value":"2523-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_vehicles"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"car_name","value":"'Kicks'"},{"name":"expected_price","value":"'$20,440'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"e73dd5f251d61368","reportUrl":"https://Uroboric.github.io/python_automation_lessons/79//#testresult/e73dd5f251d61368","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: Vehicles button\nStacktrace:\n#0 0x560e0de33fb3 <unknown>\n#1 0x560e0db074a7 <unknown>\n#2 0x560e0db4edd6 <unknown>\n#3 0x560e0db4eec1 <unknown>\n#4 0x560e0db8c354 <unknown>\n#5 0x560e0db7096d <unknown>\n#6 0x560e0db89c02 <unknown>\n#7 0x560e0db70713 <unknown>\n#8 0x560e0db4318b <unknown>\n#9 0x560e0db43f7e <unknown>\n#10 0x560e0ddf98d8 <unknown>\n#11 0x560e0ddfd800 <unknown>\n#12 0x560e0de07cfc <unknown>\n#13 0x560e0ddfe418 <unknown>\n#14 0x560e0ddcb42f <unknown>\n#15 0x560e0de224e8 <unknown>\n#16 0x560e0de226b4 <unknown>\n#17 0x560e0de33143 <unknown>\n#18 0x7f26c6294ac3 <unknown>","time":{"start":1699968832619,"stop":1699968839716,"duration":7097}}]},"tags":["parallel","@pytest.mark.usefixtures('setup')"]},"source":"420e8a3a859e81b6.json","parameterValues":["'Kicks'","'$20,440'"]}